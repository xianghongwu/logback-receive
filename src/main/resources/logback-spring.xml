<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->
<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志文件 输入位置目录 -->
    <property name="log_dir" value="logs/"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>
    <!--默认路径-->
    <property name="siftDefaultValue" value="logback-receive"/>
    <!--设置动态appender的有效时间  -->
    <property name="appenderTimeout" value="1 days"/>

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) [%thread] %-5level %logger -%msg%n</pattern>
        </encoder>
    </appender>

    <appender name="TRACE-SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!--设置动态appender的有效时间-->
        <timeout>${appenderTimeout}</timeout>
        <!-- 过滤器，只记录TRACE级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--discriminator鉴别器，根据taskId这个key对应的value鉴别日志事件，然后委托给具体appender写日志-->
        <discriminator>
            <key>projectId</key>
            <defaultValue>${siftDefaultValue}</defaultValue>
        </discriminator>
        <sift>
            <!--具体的写日志appender，每一个taskId创建一个文件-->
            <!-- TRACE级别日志 appender -->
            <appender name="TRACE-File-${projectId}" class="ch.qos.logback.core.rolling.RollingFileAppender">

                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- 按天回滚 daily -->
                    <fileNamePattern>${log_dir}/${projectId}/%d{yyyy-MM-dd}/trace.log
                    </fileNamePattern>
                    <!-- 日志最大的历史 60天 -->
                    <maxHistory>${maxHistory}</maxHistory>
                </rollingPolicy>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
                </encoder>
            </appender>
        </sift>
    </appender>

    <appender name="DEBUG-SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!--设置动态appender的有效时间-->
        <timeout>${appenderTimeout}</timeout>
        <!-- 过滤器，只记录DEBUG级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--discriminator鉴别器，根据taskId这个key对应的value鉴别日志事件，然后委托给具体appender写日志-->
        <discriminator>
            <key>projectId</key>
            <defaultValue>${siftDefaultValue}</defaultValue>
        </discriminator>
        <sift>
            <!--具体的写日志appender，每一个taskId创建一个文件-->
            <!-- DEBUG级别日志 appender -->
            <appender name="DEBUG-File-${projectId}" class="ch.qos.logback.core.rolling.RollingFileAppender">

                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- 按天回滚 daily -->
                    <fileNamePattern>${log_dir}/${projectId}/%d{yyyy-MM-dd}/debug.log
                    </fileNamePattern>
                    <!-- 日志最大的历史 60天 -->
                    <maxHistory>${maxHistory}</maxHistory>
                </rollingPolicy>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
                </encoder>
            </appender>
        </sift>
    </appender>

    <appender name="INFO-SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!--设置动态appender的有效时间-->
        <timeout>${appenderTimeout}</timeout>
        <!-- 过滤器，只记录INFO级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--discriminator鉴别器，根据taskId这个key对应的value鉴别日志事件，然后委托给具体appender写日志-->
        <discriminator>
            <key>projectId</key>
            <defaultValue>${siftDefaultValue}</defaultValue>
        </discriminator>
        <sift>
            <!--具体的写日志appender，每一个taskId创建一个文件-->
            <!-- INFO级别日志 appender -->
            <appender name="INFO-File-${projectId}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- 按天回滚 daily -->
                    <fileNamePattern>${log_dir}/${projectId}/%d{yyyy-MM-dd}/info.log
                    </fileNamePattern>
                    <!-- 日志最大的历史 60天 -->
                    <maxHistory>${maxHistory}</maxHistory>
                </rollingPolicy>
                <encoder charset="UTF-8">
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
                </encoder>
            </appender>
        </sift>
    </appender>

    <appender name="WARN-SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!--设置动态appender的有效时间-->
        <timeout>${appenderTimeout}</timeout>
        <!-- 过滤器，只记录TRACE级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--discriminator鉴别器，根据taskId这个key对应的value鉴别日志事件，然后委托给具体appender写日志-->
        <discriminator>
            <key>projectId</key>
            <defaultValue>${siftDefaultValue}</defaultValue>
        </discriminator>
        <sift>
            <!--具体的写日志appender，每一个taskId创建一个文件-->
            <!-- WARN级别日志 appender -->
            <appender name="WARN-File-${projectId}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- 按天回滚 daily -->
                    <fileNamePattern>${log_dir}/${projectId}/%d{yyyy-MM-dd}/warn.log
                    </fileNamePattern>
                    <!-- 日志最大的历史 60天 -->
                    <maxHistory>${maxHistory}</maxHistory>
                </rollingPolicy>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
                </encoder>
            </appender>
        </sift>
    </appender>

    <appender name="ERROR-SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <!--设置动态appender的有效时间-->
        <timeout>${appenderTimeout}</timeout>
        <!-- 过滤器，只记录TRACE级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--discriminator鉴别器，根据taskId这个key对应的value鉴别日志事件，然后委托给具体appender写日志-->
        <discriminator>
            <key>projectId</key>
            <defaultValue>${siftDefaultValue}</defaultValue>
        </discriminator>
        <sift>
            <!--具体的写日志appender，每一个taskId创建一个文件-->
            <!-- ERROR级别日志 -->
            <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
            <appender name="ERROR-File-${projectId}" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <!-- 过滤器，只记录ERROR级别的日志 -->
                <filter class="ch.qos.logback.classic.filter.LevelFilter">
                    <level>ERROR</level>
                    <onMatch>ACCEPT</onMatch>
                    <onMismatch>DENY</onMismatch>
                </filter>
                <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 -->
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!--日志输出位置  可相对、和绝对路径 -->
                    <fileNamePattern>${log_dir}/${projectId}/%d{yyyy-MM-dd}/error.log</fileNamePattern>
                    <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，
                    则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
                    <maxHistory>${maxHistory}</maxHistory>
                </rollingPolicy>
                <encoder>
                    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
                </encoder>
            </appender>
        </sift>
    </appender>

    <!-- root级别   DEBUG -->
    <root level="info">
        <!-- 控制台输出 -->
        <appender-ref ref="STDOUT"/>
        <!-- 文件输出 -->
        <appender-ref ref="TRACE-SIFT"/>
        <appender-ref ref="INFO-SIFT"/>
        <appender-ref ref="DEBUG-SIFT"/>
        <appender-ref ref="WARN-SIFT"/>
        <appender-ref ref="ERROR-SIFT"/>
    </root>
</configuration>